import tkinter as tk
from tkinter import ttk, messagebox, filedialog, PhotoImage
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import serialization, hashes
import base64

class VotingApp:
    def __init__(self, root):
        '''Kh·ªüi t·∫°o giao di·ªán ch√≠nh cho h·ªá th·ªëng'''
        self.root = root
        self.root.title("H·ªá th·ªëng B·ªè phi·∫øu Tr·ª±c tuy·∫øn")
        self.root.geometry("600x650")
        self.candidates = []
        self.vote_counts = {}  # Initialize vote counts dictionary
        self.result_labels = {}  # To store labels for updating vote counts
        self.style = ttk.Style()
        self.style.theme_use("default")
        self.style.configure("TNotebook.Tab", padding=[10, 4])
        self.style.map("TNotebook.Tab", 
                       background=[("selected", "#8BC34A")], 
                       foreground=[("selected", "white")])
        self.setup_ui()

    def setup_ui(self):
        '''Thi·∫øt l·∫≠p c√°c tab c·ªßa giao di·ªán'''
        self.main_notebook = ttk.Notebook(self.root)
        self.main_notebook.pack(expand=True, fill="both")
        # T·∫°o tab ch√≠nh
        self.vote_tab = tk.Frame(self.main_notebook)
        self.count_tab = ttk.Frame(self.main_notebook)
        self.info_tab = tk.Frame(self.main_notebook)
        self.main_notebook.add(self.vote_tab, text="TH·∫∫ B·ªé PHI·∫æU      ")
        self.main_notebook.add(self.count_tab, text="TH·∫∫ KI·ªÇM PHI·∫æU    ")
        self.main_notebook.add(self.info_tab, text="Th√¥ng tin ch∆∞∆°ng tr√¨nh")

        self.style.configure("TNotebook.Tab", font=("Giaothong2", 11,))
        # T·∫°o sub-tab trong TH·∫∫ B·ªé PHI·∫æU
        self.vote_notebook = ttk.Notebook(self.vote_tab)
        self.vote_notebook.pack(expand=True, fill="both")
        self.vote_key_tab = ttk.Frame(self.vote_notebook)
        self.vote_sign_tab = ttk.Frame(self.vote_notebook)
        self.vote_encrypt_tab = ttk.Frame(self.vote_notebook)
        self.vote_notebook.add(self.vote_key_tab,       text="üîë Sinh kh√≥a b·ªè phi·∫øu    ")
        self.vote_notebook.add(self.vote_sign_tab,      text="ü¶± Th·ª±c hi·ªán k√Ω s·ªë         ")
        self.vote_notebook.add(self.vote_encrypt_tab,   text="üîê M√£ h√≥a b√¨nh ch·ªçn       ")
        # T·∫°o sub-tab trong TH·∫∫ KI·ªÇM PHI·∫æU
        self.count_notebook = ttk.Notebook(self.count_tab)
        self.count_notebook.pack(expand=True, fill="both")
        self.count_key_tab = ttk.Frame(self.count_notebook)
        self.count_decrypt_tab = ttk.Frame(self.count_notebook)
        self.count_verify_tab = ttk.Frame(self.count_notebook)
        self.count_result_tab = ttk.Frame(self.count_notebook)  # New sub-tab
        self.count_notebook.add(self.count_key_tab,       text="üîë Sinh kh√≥a ki·ªÉm phi·∫øu")
        self.count_notebook.add(self.count_decrypt_tab,   text="üîì Gi·∫£i m√£ b√¨nh ch·ªçn       ")
        self.count_notebook.add(self.count_verify_tab,    text="üîç X√°c th·ª±c k√Ω s·ªë           ")
        self.count_notebook.add(self.count_result_tab,    text="üìä K·∫øt qu·∫£ b√¨nh ch·ªçn       ")  # Add new sub-tab
        # Thi·∫øt l·∫≠p giao di·ªán v√† ch·ª©c nƒÉng
        self.setup_vote_key_tab()
        self.setup_vote_sign_tab()
        self.setup_vote_encrypt_tab()
        self.setup_count_key_tab()
        self.setup_count_decrypt_tab()
        self.setup_count_verify_tab()
        self.setup_count_result_tab()  # Call the new setup method
        self.setup_info_tab()

    def create_file_selector(self, parent, label_text, filetypes, var):
        '''Thi·∫øt l·∫≠p khung ch·ªçn file'''
        frame = ttk.Frame(parent)
        frame.pack(fill="x", pady=5)
        ttk.Label(frame, text=label_text).pack(side="left", padx=5)
        entry = ttk.Entry(frame, textvariable=var, state="readonly")
        entry.pack(side="left", fill="x", expand=True, padx=5)
        return ttk.Button(frame, text="Ch·ªçn", command=lambda: self.select_file(var, filetypes, label_text))

    def select_file(self, var, filetypes, title):
        '''Thi·∫øt l·∫≠p ch·ªçn file, ki·ªÉm tra ƒë·ªãnh d·∫°ng v√† c·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n'''
        file_path = filedialog.askopenfilename(filetypes=filetypes, title=title)
        if file_path and file_path.endswith(filetypes[0][1][1:]):
            var.set(file_path)
        else:
            messagebox.showerror("L·ªói", f"Vui l√≤ng ch·ªçn file {filetypes[0][1][1:]}.")

    def generate_keys(self, pub_key_label, pri_key_label,key_size_var, prefix=""):
        '''H√†m sinh c·∫∑p kh√≥a RSA v√† l∆∞u v√†o file'''
        key_size_str = key_size_var.get()
        try:
            # L·∫•y k√≠ch th∆∞·ªõc kh√≥a v√† t·∫°o c·∫∑p kh√≥a RSA
            key_size = int(key_size_str.split()[0])
            private_key = rsa.generate_private_key(public_exponent=65537, key_size=key_size)
            public_key = private_key.public_key()
            # Chuy·ªÉn ƒë·ªïi kh√≥a sang ƒë·ªãnh d·∫°ng PEM.
            private_pem = private_key.private_bytes(encoding=serialization.Encoding.PEM,
                                                    format=serialization.PrivateFormat.PKCS8,
                                                    encryption_algorithm=serialization.NoEncryption())
            public_pem = public_key.public_bytes(encoding=serialization.Encoding.PEM,
                                                format=serialization.PublicFormat.SubjectPublicKeyInfo)
            pub_key_filename = f"{prefix}pubkey.pub"
            pri_key_filename = f"{prefix}prikey.pri"
            pub_key_file = filedialog.asksaveasfilename(defaultextension=".pub",
                                                        filetypes=[("Public Key", "*.pub"), ("All files", "*.*")],
                                                        title="L∆∞u kh√≥a c√¥ng khai",
                                                        initialfile=pub_key_filename)
            pri_key_file = filedialog.asksaveasfilename(defaultextension=".pri",
                                                        filetypes=[("Private Key", "*.pri"), ("All files", "*.*")],
                                                        title="L∆∞u kh√≥a b√≠ m·∫≠t",
                                                        initialfile=pri_key_filename)
            # C·∫≠p nh·∫≠t giao di·ªán v·ªõi ƒë∆∞·ªùng d·∫´n file kh√≥a
            if pub_key_file and pri_key_file:
                with open(pub_key_file, 'wb') as f: f.write(public_pem)
                with open(pri_key_file, 'wb') as f: f.write(private_pem)
                pub_key_label.config(text=f"Kh√≥a c√¥ng khai: {pub_key_file}")
                pri_key_label.config(text=f"Kh√≥a b√≠ m·∫≠t: {pri_key_file}")
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ sinh v√† l∆∞u kh√≥a th√†nh c√¥ng!")
            else:
                messagebox.showinfo("H·ªßy", "H·ªßy l∆∞u kh√≥a.")
        except Exception as e:
            messagebox.showerror("L·ªói", f"ƒê√£ c√≥ l·ªói x·∫£y ra: {str(e)}")

    def update_candidate_list(self):
        '''H√†m c·∫≠p nh·∫≠t danh s√°ch b√¨nh ch·ªçn hi·ªÉn th·ªã'''
        for widget in self.candidate_frame.winfo_children(): 
            widget.destroy()
        candidates = self.candidates if self.candidates else ["B√¨nh ch·ªçn A", "B√¨nh ch·ªçn B"]
        for i, cand in enumerate(candidates, 1):
            ttk.Radiobutton(self.candidate_frame, text=f"{i}. {cand}", 
                            variable=self.candidate_var, 
                            value=cand, command=lambda: self.vote_ticket.set(self.candidate_var.get())
                            ).pack(anchor="w", padx=5)
        # C·∫≠p nh·∫≠t vote_counts v√† giao di·ªán K·∫øt qu·∫£ b√¨nh ch·ªçn khi danh s√°ch ·ª©ng vi√™n thay ƒë·ªïi
        self.vote_counts = {cand: 0 for cand in candidates}
        # C·∫≠p nh·∫≠t l·∫°i giao di·ªán K·∫øt qu·∫£ b√¨nh ch·ªçn
        for widget in self.count_result_tab.winfo_children():
            widget.destroy()
        frame = ttk.Frame(self.count_result_tab)
        frame.pack(pady=10, padx=50, fill="both", expand=True)
        result_frame = ttk.LabelFrame(frame, text="K·∫øt qu·∫£ b√¨nh ch·ªçn:")
        result_frame.pack(fill="x", pady=10)
        self.result_labels = {}
        for cand in self.vote_counts:
            label = ttk.Label(result_frame, text=f"{cand}: {self.vote_counts[cand]} phi·∫øu")
            label.pack(anchor="w", padx=10, pady=2)
            self.result_labels[cand] = label

    def export_vote(self):
        '''H√†m xu·∫•t file phi·∫øu b√¨nh ch·ªçn'''
        if not (content := self.vote_ticket.get()): 
            return messagebox.showwarning("C·∫£nh b√°o", "Phi·∫øu b√¨nh ch·ªçn tr·ªëng! Vui l√≤ng b√¨nh ch·ªçn.")
        file = filedialog.asksaveasfilename(defaultextension=".txt", 
                                            filetypes=[("Text files", "*.txt")], 
                                            initialfile="vote_result.txt")
        if file:
            with open(file, "w", encoding="utf-8") as f: f.write(content)
            messagebox.showinfo("Th√†nh c√¥ng", f"K·∫øt qu·∫£ l∆∞u t·∫°i: {file}")

    def hash_file(self):
        '''H√†m bƒÉm SHA-256'''
        if not (path := self.vote_file_path.get()): 
            return messagebox.showwarning("C·∫£nh b√°o", "Ch·ªçn file k·∫øt qu·∫£ tr∆∞·ªõc!")
        with open(path, "r", encoding="utf-8") as f:
            content = f.read().encode("utf-8")
        digest = hashes.Hash(hashes.SHA256())
        digest.update(content)
        self.vote_hash = digest.finalize()
        self.hash_result_var.set(self.vote_hash.hex())

    def sign_vote(self):
        '''H√†m th·ª±c hi·ªán k√Ω s·ªë'''
        if not hasattr(self, "vote_hash"): 
            return messagebox.showwarning("C·∫£nh b√°o", "BƒÉm n·ªôi dung tr∆∞·ªõc!")
        if not hasattr(self, "private_key"): 
            return messagebox.showwarning("C·∫£nh b√°o", "Ch·ªçn kh√≥a b√≠ m·∫≠t tr∆∞·ªõc!")
        signature = self.private_key.sign(self.vote_hash, 
                                          padding.PSS(mgf=padding.MGF1(hashes.SHA256()), 
                                                      salt_length=padding.PSS.MAX_LENGTH),
                                          hashes.SHA256())
        file = filedialog.asksaveasfilename(defaultextension=".sig", 
                                            filetypes=[("Signature files", "*.sig")], 
                                            initialfile="signature.sig")
        if file:
            with open(file, "w") as f: f.write(signature.hex())
            messagebox.showinfo("Th√†nh c√¥ng", f"Ch·ªØ k√Ω l∆∞u t·∫°i: {file}")

    def encrypt_vote(self):
        '''H√†m m√£ h√≥a b√¨nh ch·ªçn'''
        if not all([self.vote_result_file_path.get(), hasattr(self, "check_public_key")]): 
            return messagebox.showwarning("C·∫£nh b√°o", "Ch·ªçn ƒë·∫ßy ƒë·ªß file v√† kh√≥a!")
        with open(self.vote_result_file_path.get(), "r", encoding="utf-8") as f: 
            vote_content = f.read().encode("utf-8")
        encrypted = self.check_public_key.encrypt(vote_content, 
                                                  padding.OAEP(mgf=padding.MGF1(hashes.SHA256()),
                                                               algorithm=hashes.SHA256(), label=None))
        file = filedialog.asksaveasfilename(defaultextension=".enc", 
                                            filetypes=[("Encrypted files", "*.enc")], 
                                            initialfile="encrypted_vote.enc")
        if file:
            with open(file, "w") as f:
                f.write(f"{base64.b64encode(encrypted).decode()}")
            messagebox.showinfo("Th√†nh c√¥ng", f"File m√£ h√≥a l∆∞u t·∫°i: {file}")

    def create_candidate_entries(self):
        '''H√†m t·∫°o √¥ nh·∫≠p n·ªôi dung b√¨nh ch·ªçn theo s·ªë l∆∞·ª£ng x√°c ƒë·ªãnh tr∆∞·ªõc'''
        try:
            num = int(self.num_candidates_var.get())
            if num <= 0: 
                raise ValueError
            for widget in self.candidate_entries_frame.winfo_children(): 
                widget.destroy()
            self.candidate_entries = [tk.StringVar() for _ in range(num)]
            for i, var in enumerate(self.candidate_entries, 1):
                frame = ttk.Frame(self.candidate_entries_frame)
                frame.pack(fill="x", pady=2)
                ttk.Label(frame, text=f"B√¨nh ch·ªçn {i}:").pack(side="left", padx=5)
                ttk.Entry(frame, textvariable=var).pack(side="left", fill="x", expand=True, padx=5)
            self.save_button.pack(pady=5)
            self.edit_frame.pack(fill="x", pady=5)
            self.edit_frame.pack_forget()
        except ValueError:
            messagebox.showerror("L·ªói", "Nh·∫≠p s·ªë l∆∞·ª£ng b√¨nh ch·ªçn h·ª£p l·ªá!")

    def save_candidates(self):
        '''H√†m l∆∞u c√°c b√¨nh ch·ªçn ƒë√£ ƒë∆∞·ª£c t·∫°o'''
        self.candidates = [entry.get() for entry in self.candidate_entries if entry.get()]
        if len(self.candidates) != len(self.candidate_entries): 
            return messagebox.showwarning("C·∫£nh b√°o", "Nh·∫≠p ƒë·∫ßy ƒë·ªß n·ªôi dung b√¨nh ch·ªçn!")
        messagebox.showinfo("Th√†nh c√¥ng", "Danh s√°ch b√¨nh ch·ªçn ƒë√£ l∆∞u!")
        self.update_candidate_list()
        # Reset vote counts and update K·∫øt qu·∫£ b√¨nh ch·ªçn tab
        self.vote_counts = {cand: 0 for cand in self.candidates}
        for widget in self.count_result_tab.winfo_children():
            widget.destroy()
        frame = ttk.Frame(self.count_result_tab)
        frame.pack(pady=10, padx=50, fill="both", expand=True)
        result_frame = ttk.LabelFrame(frame, text="K·∫øt qu·∫£ b√¨nh ch·ªçn:")
        result_frame.pack(fill="x", pady=10)
        self.result_labels = {}
        for cand in self.vote_counts:
            label = ttk.Label(result_frame, text=f"{cand}: {self.vote_counts[cand]} phi·∫øu")
            label.pack(anchor="w", padx=10, pady=2)
            self.result_labels[cand] = label
        self.save_button.pack_forget()
        self.edit_frame.pack_forget()
        if self.candidate_entries:  
            self.edit_frame.pack(fill="x", pady=5)
        else:
            self.edit_frame.pack_forget()

    def delete_candidates(self):
        '''H√†m x√≥a c√°c b√¨nh ch·ªçn ƒë√£ t·∫°o'''
        self.num_candidates_var.set("")
        for widget in self.candidate_entries_frame.winfo_children():
            widget.destroy()
        self.candidate_entries.clear()
        self.candidates.clear()
        self.save_button.pack_forget()
        self.edit_frame.pack_forget()
        # Reset vote counts and update K·∫øt qu·∫£ b√¨nh ch·ªçn tab
        self.update_candidate_list()  # This will reset to default candidates

    def decrypt_vote(self):
        '''H√†m gi·∫£i m√£ b√¨nh ch·ªçn'''
        if not all([self.encrypted_file_path.get(), hasattr(self, "check_private_key")]): 
            return messagebox.showwarning("C·∫£nh b√°o", "Ch·ªçn ƒë·∫ßy ƒë·ªß file v√† kh√≥a!")
        with open(self.encrypted_file_path.get(), "r") as f:
            enc_vote = f.read().strip()
        decrypted = self.check_private_key.decrypt(base64.b64decode(enc_vote), 
                                                   padding.OAEP(mgf=padding.MGF1(hashes.SHA256()), 
                                                                algorithm=hashes.SHA256(), 
                                                                label=None))
        file = filedialog.asksaveasfilename(defaultextension=".txt", 
                                            filetypes=[("Text files", "*.txt")], 
                                            initialfile="decrypted_vote.txt")
        if file:
            with open(file, "w", encoding="utf-8") as f: f.write(decrypted.decode())
            messagebox.showinfo("Th√†nh c√¥ng", f"File gi·∫£i m√£ l∆∞u t·∫°i: {file}")

    def verify_signature(self):
        '''H√†m x√°c th·ª±c k√Ω s·ªë'''
        if not all([self.decrypted_file_path.get(), self.signature_file_path_verify.get(), hasattr(self, "vote_public_key")]): 
            return messagebox.showwarning("C·∫£nh b√°o", "Ch·ªçn ƒë·∫ßy ƒë·ªß file v√† kh√≥a!")
        with open(self.decrypted_file_path.get(), "r", encoding="utf-8") as f: 
            content = f.read().encode("utf-8")
        with open(self.signature_file_path_verify.get(), "r") as f: 
            signature = bytes.fromhex(f.read())
        digest = hashes.Hash(hashes.SHA256())
        digest.update(content)
        try:
            self.vote_public_key.verify(signature, digest.finalize(), 
                                        padding.PSS(mgf=padding.MGF1(hashes.SHA256()), 
                                                    salt_length=padding.PSS.MAX_LENGTH), 
                                        hashes.SHA256())
            messagebox.showinfo("K·∫øt qu·∫£", "X√°c th·ª±c th√†nh c√¥ng!")
            # N·∫øu x√°c th·ª±c th√†nh c√¥ng, c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng b√¨nh ch·ªçn
            with open(self.decrypted_file_path.get(), "r", encoding="utf-8") as f:
                vote = f.read().strip()
                # Ki·ªÉm tra xem vote c√≥ n·∫±m trong danh s√°ch ·ª©ng vi√™n kh√¥ng
                if vote in self.vote_counts:
                    self.vote_counts[vote] += 1
                    # C·∫≠p nh·∫≠t giao di·ªán
                    self.result_labels[vote].config(text=f"{vote}: {self.vote_counts[vote]} phi·∫øu")
        except:
            messagebox.showerror("K·∫øt qu·∫£", "X√°c th·ª±c kh√¥ng th√†nh c√¥ng!")
            # N·∫øu x√°c th·ª±c kh√¥ng th√†nh c√¥ng, kh√¥ng c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng b√¨nh ch·ªçn

    def setup_vote_key_tab(self):
        '''Thi·∫øt l·∫≠p sub-tab sinh kh√≥a b·ªè phi·∫øu'''
        frame = ttk.Frame(self.vote_key_tab)
        frame.pack(pady=5, padx=50, fill="both", expand=True)

        # T·∫£i ·∫£nh v√† ƒë·∫∑t v√†o ƒë·∫ßu box
        image = PhotoImage(file="image.png") 
        img_label = tk.Label(frame, image=image)
        img_label.image = image
        img_label.pack(side="top", pady=10)

        key_size_frame = ttk.LabelFrame(frame, text="1. Th√¥ng tin c·∫∑p kh√≥a d√πng ƒë·ªÉ B·ªè phi·∫øu: ")
        key_size_frame.pack(fill="x", pady=5)
        pub_label = ttk.Label(key_size_frame, text="Ch·ªçn k√≠ch th∆∞·ªõc kh√≥a: ")
        pub_label.pack(anchor="w", padx=10)
        self.vote_key_size_var = tk.StringVar(value="")

        ttk.Combobox(key_size_frame, textvariable=self.vote_key_size_var, values=["1024 bit", "2048 bit"], 
                     state="readonly", justify="center").pack(pady=5)
        
        tk.Button(key_size_frame, text="  Sinh kh√≥a  ", command=lambda: self.generate_keys(pub_label, pri_label,self.vote_key_size_var,"vote_"),
                  bg="grey", fg="white").pack(pady=5)
        
        pub_label = ttk.Label(key_size_frame, text="Kh√≥a c√¥ng khai: Ch∆∞a c√≥")
        pri_label = ttk.Label(key_size_frame, text="Kh√≥a b√≠ m·∫≠t: Ch∆∞a c√≥")
        pub_label.pack(anchor="w", padx=10)
        pri_label.pack(anchor="w", padx=10)

        self.candidate_frame = ttk.LabelFrame(frame, text="2. Danh s√°ch b√¨nh ch·ªçn: ")
        self.candidate_frame.pack(fill="x", pady=10)
        self.candidate_var = tk.StringVar()
        self.update_candidate_list()

        vote_frame = ttk.LabelFrame(frame, text="3. N·ªôi dung b√¨nh ch·ªçn: ")
        vote_frame.pack(fill="x", pady=10)
        self.vote_ticket = tk.StringVar()

        tk.Entry(vote_frame, textvariable=self.vote_ticket, 
                 state="readonly", bg="white").pack(fill="x", padx=5, pady=5)
        
        tk.Button(vote_frame, text="  Xu·∫•t n·ªôi dung b√¨nh ch·ªçn  ", command=self.export_vote,
                  bg="grey", fg="white").pack(pady=5)

    def setup_vote_sign_tab(self):
        '''Thi·∫øt l·∫≠p sub-tab th·ª±c hi·ªán k√Ω s·ªë'''
        frame = ttk.Frame(self.vote_sign_tab)
        frame.pack(pady=10, padx=50, fill="both", expand=True)

        self.vote_file_path = tk.StringVar()
        self.create_file_selector(frame, "T·∫≠p tin: ", [("Text files", "*.txt")],
                                  self.vote_file_path).pack(side="left", padx=5)
    
        hash_frame = ttk.Frame(frame)
        hash_frame.pack(fill="x", pady=5)
        ttk.Label(hash_frame, text="K·∫øt qu·∫£ bƒÉm: ").pack(side="left", padx=5)

        self.hash_result_var = tk.StringVar()
        tk.Entry(hash_frame, textvariable=self.hash_result_var, 
                 state="readonly", bg="white").pack(side="left", fill="x", expand=True, padx=5)
        ttk.Button(hash_frame, text="BƒÉm", command=self.hash_file).pack(side="left", padx=5)

        private_key_path = tk.StringVar()
        private_key_path.trace("w", lambda *args: setattr(self, "private_key", 
                                                          serialization.load_pem_private_key(open(private_key_path.get(), "rb").read(), None) 
                                                          if private_key_path.get() else None))

        self.create_file_selector(frame, "Kh√≥a c√° nh√¢n b·ªè phi·∫øu: ", [("Private Key", "*.pri")], 
                                  private_key_path,).pack(side="left", padx=5)
        
        tk.Button(frame, text="   Th·ª±c hi·ªán k√Ω s·ªë   ", command=self.sign_vote,
                  bg="grey", fg="white").pack(pady=10)

    def setup_vote_encrypt_tab(self):
        '''Thi·∫øt l·∫≠p sub-tab m√£ h√≥a b√¨nh ch·ªçn'''
        frame = ttk.Frame(self.vote_encrypt_tab)
        frame.pack(pady=10, padx=50, fill="both", expand=True)

        self.vote_result_file_path = tk.StringVar()
        self.signature_file_path = tk.StringVar()
        check_public_key_path = tk.StringVar()

        self.create_file_selector(frame, "T·∫≠p tin:", [("Text files", "*.txt")], 
                                  self.vote_result_file_path).pack(side="left", padx=5)
        
        self.create_file_selector(frame, "Kh√≥a c√¥ng khai ki·ªÉm phi·∫øu: ", [("Public Key", "*.pub")],     
                                  check_public_key_path).pack(side="left", padx=5)
        
        check_public_key_path.trace("w", lambda *args: setattr(self, "check_public_key", 
                                                               serialization.load_pem_public_key(open(check_public_key_path.get(), "rb").read()) 
                                                               if check_public_key_path.get() else None))
        
        tk.Button(frame, text="   M√£ h√≥a   ", command=self.encrypt_vote,
                  bg="grey", fg="white").pack(pady=10)

    def setup_count_key_tab(self):
        '''Thi·∫øt l·∫≠p sub-tab sinh kh√≥a ki·ªÉm phi·∫øu'''
        frame = ttk.Frame(self.count_key_tab)
        frame.pack(pady=5, padx=50, fill="both", expand=True)

        key_size_frame = ttk.LabelFrame(frame, text="1. Th√¥ng tin c·∫∑p kh√≥a d√πng ƒë·ªÉ Ki·ªÉm phi·∫øu: ")
        key_size_frame.pack(fill="x", pady=5)
        pub_label = ttk.Label(key_size_frame, text="Ch·ªçn k√≠ch th∆∞·ªõc kh√≥a: ")
        pub_label.pack(anchor="w", padx=10)
        self.count_key_size_var = tk.StringVar(value="")

        ttk.Combobox(key_size_frame, textvariable=self.count_key_size_var, values=["4096 bit"], 
                     state="readonly", justify="center").pack(pady=5)

        tk.Button(key_size_frame, text="  Sinh kh√≥a  ", command=lambda: self.generate_keys(pub_label, pri_label,self.count_key_size_var, "check_"),
                  bg="grey", fg="white").pack(pady=5)
        
        pub_label = ttk.Label(key_size_frame, text="Kh√≥a c√¥ng khai: Ch∆∞a c√≥")
        pri_label = ttk.Label(key_size_frame, text="Kh√≥a b√≠ m·∫≠t: Ch∆∞a c√≥")
        pub_label.pack(anchor="w", padx=10)
        pri_label.pack(anchor="w", padx=10)

        num_frame = ttk.LabelFrame(frame, text="2. S·ªë l∆∞·ª£ng b√¨nh ch·ªçn: ")
        num_frame.pack(fill="both", pady=5)
        self.num_candidates_var = tk.StringVar()
        ttk.Entry(num_frame, textvariable=self.num_candidates_var, 
                  justify="center").pack(pady=5)
        tk.Button(num_frame, text="   T·∫°o danh s√°ch b√¨nh ch·ªçn   ", 
                   command=self.create_candidate_entries,
                   bg="grey", fg="white").pack(pady=5)

        candidate_frame = ttk.LabelFrame(frame, text="3. Danh s√°ch b√¨nh ch·ªçn: ")
        candidate_frame.pack(fill="x", pady=5)
        self.candidate_entries_frame = ttk.Frame(candidate_frame)
        self.candidate_entries_frame.pack(fill="x", padx=5, pady=5)
        self.candidate_entries = []
        self.save_button = tk.Button(candidate_frame, text="  L∆∞u danh s√°ch   ", 
                                      command=self.save_candidates,
                                      bg="grey", fg="white")
        self.edit_frame = ttk.Frame(candidate_frame)
        tk.Button(self.edit_frame, text="   X√≥a danh s√°ch   ",
                   command=self.delete_candidates,
                   bg="grey", fg="white").pack(side="left", padx=10)

    def setup_count_decrypt_tab(self):
        '''Thi·∫øt l·∫≠p sub-tab gi·∫£i m√£ b√¨nh ch·ªçn'''
        frame = ttk.Frame(self.count_decrypt_tab)
        frame.pack(pady=10, padx=50, fill="both", expand=True)

        self.encrypted_file_path = tk.StringVar()
        self.signature_file_path_decrypt = tk.StringVar()
        check_private_key_path = tk.StringVar()
        self.create_file_selector(frame, "T·∫≠p tin: ", [("Encrypted files", "*.enc")], 
                                  self.encrypted_file_path).pack(side="left", padx=5)
        self.create_file_selector(frame, "Kh√≥a c√° nh√¢n ki·ªÉm phi·∫øu: ", [("Private Key", "*.pri")], 
                                  check_private_key_path).pack(side="left", padx=5)

        check_private_key_path.trace("w", lambda *args: setattr(self, "check_private_key",
                                                                serialization.load_pem_private_key(open(check_private_key_path.get(), "rb").read(), None)
                                                                if check_private_key_path.get() else None))
        tk.Button(frame, text="  Gi·∫£i m√£  ", command=self.decrypt_vote,
                  bg="grey", fg="white").pack(pady=10)

    def setup_count_verify_tab(self):
        '''Thi·∫øt l·∫≠p sub-tab x√°c th·ª±c k√Ω s·ªë'''
        frame = ttk.Frame(self.count_verify_tab)
        frame.pack(pady=10, padx=50, fill="both", expand=True)

        self.decrypted_file_path = tk.StringVar()
        self.signature_file_path_verify = tk.StringVar()
        vote_public_key_path = tk.StringVar()
        self.create_file_selector(frame, "T·∫≠p tin: ", [("Text files", "*.txt")],
                                  self.decrypted_file_path).pack(side="left", padx=5)
        self.create_file_selector(frame, "Ch·ªØ k√Ω s·ªë: ", [("Signature files", "*.sig")],
                                  self.signature_file_path_verify).pack(side="left", padx=5)
        self.create_file_selector(frame, "Kh√≥a c√¥ng khai b·ªè phi·∫øu: ", [("Public Key", "*.pub")],
                                  vote_public_key_path).pack(side="left", padx=5)
        vote_public_key_path.trace("w", lambda *args: setattr(self, "vote_public_key",
                                                              serialization.load_pem_public_key(open(vote_public_key_path.get(), "rb").read())
                                                              if vote_public_key_path.get() else None))

        tk.Button(frame, text="   X√°c th·ª±c k√Ω s·ªë   ", command=self.verify_signature,
                  bg="grey", fg="white").pack(pady=10)

    def setup_count_result_tab(self):
        '''Thi·∫øt l·∫≠p sub-tab k·∫øt qu·∫£ b√¨nh ch·ªçn'''
        frame = ttk.Frame(self.count_result_tab)
        frame.pack(pady=10, padx=50, fill="both", expand=True)

        # Khung hi·ªÉn th·ªã k·∫øt qu·∫£ b√¨nh ch·ªçn
        result_frame = ttk.LabelFrame(frame, text="K·∫øt qu·∫£ b√¨nh ch·ªçn:")
        result_frame.pack(fill="x", pady=10)

        # Kh·ªüi t·∫°o vote_counts n·∫øu ch∆∞a c√≥
        if not self.vote_counts:
            candidates = self.candidates if self.candidates else ["B√¨nh ch·ªçn A", "B√¨nh ch·ªçn B"]
            self.vote_counts = {cand: 0 for cand in candidates}

        # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng b√¨nh ch·ªçn cho t·ª´ng ·ª©ng vi√™n
        for cand in self.vote_counts:
            label = ttk.Label(result_frame, text=f"{cand}: {self.vote_counts[cand]} phi·∫øu")
            label.pack(anchor="w", padx=10, pady=2)
            self.result_labels[cand] = label  # L∆∞u label ƒë·ªÉ c·∫≠p nh·∫≠t sau

    def setup_info_tab(self):
        '''Thi·∫øt l·∫≠p tab Th√¥ng tin ch∆∞∆°ng tr√¨nh'''
        frame = tk.Frame(self.info_tab)
        frame.pack(pady=5, padx=40, fill="both", expand=True)
        t = ("Ch∆∞∆°ng tr√¨nh n√†y ·ª©ng d·ª•ng Thu·∫≠t to√°n m√£ h√≥a b·∫•t ƒë·ªëi x·ª©ng RSA v·ªõi c∆° ch·∫ø\n"
            "hai c·∫∑p kh√≥a k·∫øt h·ª£p ch·ªØ k√Ω s·ªë ƒë·ªÉ m√£ h√≥a v√† gi·∫£i m√£ c√°c phi·∫øu b√¨nh ch·ªçn, \n"
            "ƒë·∫£m b·∫£o an to√†n, b·∫£o m·∫≠t v√† ti·ªán l·ª£i.\n"
            "\n"
            "Ch∆∞∆°ng tr√¨nh l√† th√†nh qu·∫£ c·ªßa c√°c b·∫°n Nguy·ªÖn Qu·ªëc, M·ªπ Dung, Di√™u Ly,\n"
            "Ng·ªçc Mai, Y·∫øn Nhi ƒë√£ d√†nh th·ªùi gian v√† c√¥ng s·ª©c nghi√™n c·ª©u, ph√°t tri·ªÉn\n"
            "nh·∫±m mang l·∫°i m·ªôt h·ªá th·ªëng b·∫£o m·∫≠t v√† minh b·∫°ch trong b√¨nh ch·ªçn.\n"
            "\n"
            "Nh√≥m t√°c gi·∫£ hy v·ªçng r·∫±ng ·ª©ng d·ª•ng n√†y s·∫Ω g√≥p ph·∫ßn n√¢ng cao t√≠nh b·∫£o m·∫≠t\n"
            "v√† ti·ªán l·ª£i cho ng∆∞·ªùi d√πng.")
        pub_label = tk.Label(frame, text=t, justify="left", font=("Times New Roman", 11, "italic")).pack(anchor="w", padx=10, pady=10)

if __name__ == "__main__":
    root = tk.Tk()
    app = VotingApp(root)
    root.update_idletasks()
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    position_x = (screen_width//2) - (600//2)
    position_y = (screen_height//2) - (650//2) - 50
    root.geometry(f"{600}x{650}+{position_x}+{position_y}")
    root.mainloop()